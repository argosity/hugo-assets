// Generated by CoffeeScript 2.5.1
(function() {
  var FAILURE_MSG, SUCCESS_MSG;

  window.Argosity || (window.Argosity = {});

  FAILURE_MSG = `<p>
    The message failed to send.
</p><p>
    Please contact us via phone or email directly
</p>`;

  SUCCESS_MSG = `<p>
    Message was delivered successfully
</p>`;

  window.Argosity.ContactForm = class ContactForm {
    constructor(options = {}) {
      var container, link, url;
      ({container, link, url} = options);
      this.url = url || 'https://contact.argosity.com/message.json';
      this.containerSelector = container;
      this.container = document.querySelector(container);
      if (this.container) {
        this.bindElements();
      }
      this.options = options;
      if (link) {
        new Argosity.ScrollLink(link, this.containerSelector);
      }
    }

    bindElements() {
      this.form = this.container.querySelector("form");
      this.form.addEventListener('submit', (ev) => {
        return this.onSubmit(ev);
      });
      this.msgStatus = document.querySelector(`${this.containerSelector} .message-status`);
      return this.msgStatus.style.display = 'none';
    }

    showFail(msg) {
      var ref;
      if ((ref = this.msgStatus.classList) != null) {
        ref.add('alert-danger');
      }
      return this.msgStatus.innerHTML = msg || FAILURE_MSG;
    }

    onSubmitComplete(xhr) {
      var msg, ref;
      this.container.classList.remove('sending');
      if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
        msg = JSON.parse(xhr.responseText);
        if (msg.success) {
          if ((ref = this.msgStatus.classList) != null) {
            ref.add('alert-success');
          }
          this.msgStatus.innerHTML = this.options.successMessage || SUCCESS_MSG;
        } else {
          this.showFail(msg.message);
        }
      } else {
        this.showFail();
      }
      return this.msgStatus.style.display = 'block';
    }

    onSubmit(ev) {
      var data, el, form, i, len, ref, xhr;
      ev.preventDefault();
      this.container.classList.add('sending');
      data = {};
      form = ev.target;
      ref = form.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        data[el.name] = el.value;
      }
      xhr = new XMLHttpRequest();
      xhr.open('POST', this.url);
      xhr.onreadystatechange = () => {
        if (xhr.readyState === 4) {
          return this.onSubmitComplete(xhr);
        }
      };
      return xhr.send(JSON.stringify(data));
    }

  };

}).call(this);
